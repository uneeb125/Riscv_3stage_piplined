$date
	Wed May  8 04:41:45 2024
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module tb_uart_top $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var reg 32 # cpu_address [31:0] $end
$var reg 32 $ cpu_data [31:0] $end
$var reg 1 % write_enable $end
$var reg 1 & cpu_tx_start $end
$var reg 8 ' dout [7:0] $end

$scope module UUT $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 * cpu_address [31] $end
$var wire 1 + cpu_address [30] $end
$var wire 1 , cpu_address [29] $end
$var wire 1 - cpu_address [28] $end
$var wire 1 . cpu_address [27] $end
$var wire 1 / cpu_address [26] $end
$var wire 1 0 cpu_address [25] $end
$var wire 1 1 cpu_address [24] $end
$var wire 1 2 cpu_address [23] $end
$var wire 1 3 cpu_address [22] $end
$var wire 1 4 cpu_address [21] $end
$var wire 1 5 cpu_address [20] $end
$var wire 1 6 cpu_address [19] $end
$var wire 1 7 cpu_address [18] $end
$var wire 1 8 cpu_address [17] $end
$var wire 1 9 cpu_address [16] $end
$var wire 1 : cpu_address [15] $end
$var wire 1 ; cpu_address [14] $end
$var wire 1 < cpu_address [13] $end
$var wire 1 = cpu_address [12] $end
$var wire 1 > cpu_address [11] $end
$var wire 1 ? cpu_address [10] $end
$var wire 1 @ cpu_address [9] $end
$var wire 1 A cpu_address [8] $end
$var wire 1 B cpu_address [7] $end
$var wire 1 C cpu_address [6] $end
$var wire 1 D cpu_address [5] $end
$var wire 1 E cpu_address [4] $end
$var wire 1 F cpu_address [3] $end
$var wire 1 G cpu_address [2] $end
$var wire 1 H cpu_address [1] $end
$var wire 1 I cpu_address [0] $end
$var wire 1 J cpu_data [31] $end
$var wire 1 K cpu_data [30] $end
$var wire 1 L cpu_data [29] $end
$var wire 1 M cpu_data [28] $end
$var wire 1 N cpu_data [27] $end
$var wire 1 O cpu_data [26] $end
$var wire 1 P cpu_data [25] $end
$var wire 1 Q cpu_data [24] $end
$var wire 1 R cpu_data [23] $end
$var wire 1 S cpu_data [22] $end
$var wire 1 T cpu_data [21] $end
$var wire 1 U cpu_data [20] $end
$var wire 1 V cpu_data [19] $end
$var wire 1 W cpu_data [18] $end
$var wire 1 X cpu_data [17] $end
$var wire 1 Y cpu_data [16] $end
$var wire 1 Z cpu_data [15] $end
$var wire 1 [ cpu_data [14] $end
$var wire 1 \ cpu_data [13] $end
$var wire 1 ] cpu_data [12] $end
$var wire 1 ^ cpu_data [11] $end
$var wire 1 _ cpu_data [10] $end
$var wire 1 ` cpu_data [9] $end
$var wire 1 a cpu_data [8] $end
$var wire 1 b cpu_data [7] $end
$var wire 1 c cpu_data [6] $end
$var wire 1 d cpu_data [5] $end
$var wire 1 e cpu_data [4] $end
$var wire 1 f cpu_data [3] $end
$var wire 1 g cpu_data [2] $end
$var wire 1 h cpu_data [1] $end
$var wire 1 i cpu_data [0] $end
$var wire 1 j write_enable $end
$var reg 32 k cout [31:0] $end
$var reg 1 l tx_int $end
$var reg 1 m rx_int $end
$var reg 1 n tx_done $end
$var reg 11 o dvsr [10:0] $end
$var reg 8 p data_out [7:0] $end
$var reg 1 q tx_start $end
$var reg 1 r snum $end
$var reg 8 s d_rx [7:0] $end
$var reg 1 t rx_done $end
$var reg 1 u rxing $end
$var reg 1 v tx_tick $end
$var reg 1 w full $end
$var wire 1 x rx_tick $end
$var wire 1 y rx $end
$var wire 1 z tx $end

$scope module uart_baud_gen $end
$var wire 1 ( clk $end
$var wire 1 ) reset $end
$var wire 1 { dvsr [10] $end
$var wire 1 | dvsr [9] $end
$var wire 1 } dvsr [8] $end
$var wire 1 ~ dvsr [7] $end
$var wire 1 !! dvsr [6] $end
$var wire 1 "! dvsr [5] $end
$var wire 1 #! dvsr [4] $end
$var wire 1 $! dvsr [3] $end
$var wire 1 %! dvsr [2] $end
$var wire 1 &! dvsr [1] $end
$var wire 1 '! dvsr [0] $end
$var reg 1 (! tx_tick $end
$var reg 1 )! rx_tick $end
$var reg 12 *! tx_count_reg [11:0] $end
$var reg 12 +! rx_count_reg [11:0] $end
$var reg 12 ,! dvsrtx [11:0] $end
$var reg 12 -! dvsrrx [11:0] $end
$upscope $end

$scope module uart_reg_block $end
$var wire 1 ( clk $end
$var wire 1 j write_enable $end
$var wire 1 E address [4] $end
$var wire 1 F address [3] $end
$var wire 1 G address [2] $end
$var wire 1 H address [1] $end
$var wire 1 I address [0] $end
$var wire 1 K data_in [30] $end
$var wire 1 L data_in [29] $end
$var wire 1 M data_in [28] $end
$var wire 1 N data_in [27] $end
$var wire 1 O data_in [26] $end
$var wire 1 P data_in [25] $end
$var wire 1 Q data_in [24] $end
$var wire 1 R data_in [23] $end
$var wire 1 S data_in [22] $end
$var wire 1 T data_in [21] $end
$var wire 1 U data_in [20] $end
$var wire 1 V data_in [19] $end
$var wire 1 W data_in [18] $end
$var wire 1 X data_in [17] $end
$var wire 1 Y data_in [16] $end
$var wire 1 Z data_in [15] $end
$var wire 1 [ data_in [14] $end
$var wire 1 \ data_in [13] $end
$var wire 1 ] data_in [12] $end
$var wire 1 ^ data_in [11] $end
$var wire 1 _ data_in [10] $end
$var wire 1 ` data_in [9] $end
$var wire 1 a data_in [8] $end
$var wire 1 b data_in [7] $end
$var wire 1 c data_in [6] $end
$var wire 1 d data_in [5] $end
$var wire 1 e data_in [4] $end
$var wire 1 f data_in [3] $end
$var wire 1 g data_in [2] $end
$var wire 1 h data_in [1] $end
$var wire 1 i data_in [0] $end
$var wire 1 .! tx_done $end
$var wire 1 /! snum $end
$var wire 1 0! rx_done $end
$var wire 1 1! d_rx [7] $end
$var wire 1 2! d_rx [6] $end
$var wire 1 3! d_rx [5] $end
$var wire 1 4! d_rx [4] $end
$var wire 1 5! d_rx [3] $end
$var wire 1 6! d_rx [2] $end
$var wire 1 7! d_rx [1] $end
$var wire 1 8! d_rx [0] $end
$var wire 1 9! rxing $end
$var reg 11 :! dvsr [10:0] $end
$var reg 8 ;! data_out [7:0] $end
$var reg 1 <! tx_start $end
$var reg 1 =! full $end
$var reg 32 >! cout [31:0] $end
$var reg 1 ?! tx_int $end
$var reg 1 @! rx_int $end
$upscope $end

$scope module uart_receiver $end
$var parameter 32 A! DBIT $end
$var parameter 32 B! SB_TICK $end
$var wire 1 x clk $end
$var wire 1 ) reset $end
$var wire 1 C! snum $end
$var reg 8 D! d_rx [7:0] $end
$var reg 1 E! rx_done $end
$var reg 1 F! rxing $end
$var wire 1 y rx $end
$var integer 32 G! state_current $end
$var integer 32 H! state_next $end
$var reg 5 I! bit_count [4:0] $end
$var reg 8 J! shift_reg [7:0] $end
$var reg 1 K! sample $end
$var reg 1 L! overing $end
$upscope $end

$scope module uart_transmitter $end
$var parameter 32 M! DBIT $end
$var parameter 32 N! SB_TICK $end
$var wire 1 O! clk $end
$var wire 1 ) reset $end
$var wire 1 P! snum $end
$var wire 1 Q! tx_start $end
$var wire 1 R! d_tx [7] $end
$var wire 1 S! d_tx [6] $end
$var wire 1 T! d_tx [5] $end
$var wire 1 U! d_tx [4] $end
$var wire 1 V! d_tx [3] $end
$var wire 1 W! d_tx [2] $end
$var wire 1 X! d_tx [1] $end
$var wire 1 Y! d_tx [0] $end
$var reg 1 Z! tx_done $end
$var reg 1 [! tx $end
$var integer 32 \! state_current $end
$var integer 32 ]! state_next $end
$var reg 5 ^! bit_count [4:0] $end
$var reg 8 _! shift_reg [7:0] $end
$var reg 1 `! tx_reg $end
$var reg 1 a! tx_next $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
b0 #
b0 $
x%
0&
bx '
bx0000000000000000000000000000000 k
xl
xm
0n
bx o
bx p
xq
xr
bx s
0t
0u
0v
xw
0(!
1)!
b0 *!
b0 +!
b0 ,!
bx -!
bx :!
bx ;!
x<!
x=!
bx0000000000000000000000000000000 >!
x?!
x@!
bx D!
0E!
0F!
b0 I!
b0 J!
1K!
xL!
0Z!
1[!
b0 ^!
bx _!
1`!
xa!
b1000 A!
b10000 B!
b1000 M!
b10000 N!
b0 G!
b0 H!
b0 \!
b0 ]!
1x
zy
1z
0(
1)
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
xj
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
0.!
00!
09!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x/!
xC!
0O!
xQ!
xP!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
$end
#10000
1!
1(
#20000
0!
0(
#30000
1!
1(
#40000
0!
0(
#45000
0"
0)
#50000
1!
1(
b0xxxxxxxxxx ,!
b0xxxxxxxxx -!
b1 +!
1(!
1v
1O!
#60000
0!
0(
#65000
1%
b10000000000000000000000000000000 #
b1101001 $
1j
1i
1f
1d
1c
1*
#70000
1!
1(
b10 +!
b1 *!
#80000
0!
0(
b1101001 ;!
1=!
1w
b1101001 p
1Y!
0X!
0W!
1V!
0U!
1T!
1S!
0R!
b10000000000000000000000000000000 >!
b10000000000000000000000000000000 k
#85000
b10000000000000000000000000000100 #
b1 $
0f
0d
0c
1G
bx >!
bx k
#90000
1!
1(
b11 +!
b10 *!
#100000
0!
0(
b1 :!
b1 o
1'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
b1 >!
b1 k
#105000
b10000000000000000000000000001000 #
0G
1F
bx >!
bx k
#110000
1!
1(
b0 ,!
b0 -!
b100 +!
b11 *!
#120000
0!
0(
1<!
1q
1Q!
b1 ]!
b1 >!
b1 k
#130000
1!
1(
0)!
b0 +!
0(!
b0 *!
0v
0x
0O!
0K!
#140000
0!
0(
#150000
1!
1(
1)!
1(!
1v
1x
1O!
b1 \!
0`!
b1101001 _!
b10 ]!
0[!
0z
#160000
0!
0(
#170000
1!
1(
0)!
0(!
0v
0x
0O!
#180000
0!
0(
#190000
1!
1(
1)!
1(!
1v
1x
1O!
b10 \!
1`!
1[!
1z
#200000
0!
0(
#210000
1!
1(
0)!
0(!
0v
0x
0O!
#220000
0!
0(
#230000
1!
1(
1)!
1(!
1v
1x
1O!
b1 ^!
0`!
0[!
0z
#240000
0!
0(
#250000
1!
1(
0)!
0(!
0v
0x
0O!
#260000
0!
0(
#270000
1!
1(
1)!
1(!
1v
1x
1O!
b10 ^!
#280000
0!
0(
#290000
1!
1(
0)!
0(!
0v
0x
0O!
#300000
0!
0(
#310000
1!
1(
1)!
1(!
1v
1x
1O!
b11 ^!
1`!
1[!
1z
#320000
0!
0(
#330000
1!
1(
0)!
0(!
0v
0x
0O!
#340000
0!
0(
#350000
1!
1(
1)!
1(!
1v
1x
1O!
b100 ^!
0`!
0[!
0z
#360000
0!
0(
#370000
1!
1(
0)!
0(!
0v
0x
0O!
#380000
0!
0(
#390000
1!
1(
1)!
1(!
1v
1x
1O!
b101 ^!
1`!
1[!
1z
#400000
0!
0(
#410000
1!
1(
0)!
0(!
0v
0x
0O!
#420000
0!
0(
#430000
1!
1(
1)!
1(!
1v
1x
1O!
b110 ^!
#440000
0!
0(
#450000
1!
1(
0)!
0(!
0v
0x
0O!
#460000
0!
0(
#470000
1!
1(
1)!
1(!
1v
1x
1O!
b111 ^!
0`!
b11 ]!
0[!
0z
#480000
0!
0(
#490000
1!
1(
0)!
0(!
0v
0x
0O!
#500000
0!
0(
#510000
1!
1(
1)!
1(!
1v
1x
1O!
b11 \!
b1000 ^!
1`!
1Z!
1n
1[!
1.!
1z
#520000
0!
0(
#530000
1!
1(
0)!
0(!
0v
0x
0O!
#540000
0!
0(
#550000
1!
1(
1)!
1(!
1v
1x
1O!
b0 ^!
#560000
0!
0(
#570000
1!
1(
0)!
0(!
0v
0x
0O!
#580000
0!
0(
#590000
1!
1(
1)!
1(!
1v
1x
1O!
#600000
0!
0(
#610000
1!
1(
0)!
0(!
0v
0x
0O!
#620000
0!
0(
