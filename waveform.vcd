$date
	Sun Mar  3 13:44:23 2024
$end
$version
	ModelSim Version 2020.1
$end
$timescale
	1ps
$end

$scope module main_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end

$scope module dut $end
$var parameter 32 # DATA_WIDTH $end
$var parameter 32 $ ADDR_WIDTH $end
$var parameter 32 % REG_INDEX_WIDTH $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var reg 32 ( pc_current [31:0] $end
$var reg 32 ) pc_next [31:0] $end
$var reg 1 * PCen $end
$var reg 32 + instruction [31:0] $end
$var reg 5 , read_reg1 [4:0] $end
$var reg 5 - read_reg2 [4:0] $end
$var reg 5 . write_reg [4:0] $end
$var reg 32 / read_data1 [31:0] $end
$var reg 32 0 read_data2 [31:0] $end
$var reg 32 1 write_data [31:0] $end
$var reg 1 2 reg_write_enable $end
$var reg 32 3 alu_result [31:0] $end
$var reg 32 4 immediate_value [31:0] $end
$var reg 4 5 alu_control_signal [3:0] $end
$var reg 1 6 reg_write_signal $end
$var reg 1 7 read_en $end
$var reg 1 8 wb_sel $end
$var reg 1 9 write_en $end
$var reg 1 : mem_read $end
$var reg 1 ; mem_write $end
$var reg 32 < mem_data_out [31:0] $end
$var reg 1 = br_taken $end
$var reg 32 > pc [31:0] $end
$var reg 1 ? sel_A $end
$var reg 32 @ ALU_in_A [31:0] $end
$var reg 1 A br_type $end

$scope module PCCounter $end
$var parameter 32 B Width $end
$var wire 1 & clk $end
$var wire 1 ' reset $end
$var wire 1 C PCen $end
$var wire 1 D next [31] $end
$var wire 1 E next [30] $end
$var wire 1 F next [29] $end
$var wire 1 G next [28] $end
$var wire 1 H next [27] $end
$var wire 1 I next [26] $end
$var wire 1 J next [25] $end
$var wire 1 K next [24] $end
$var wire 1 L next [23] $end
$var wire 1 M next [22] $end
$var wire 1 N next [21] $end
$var wire 1 O next [20] $end
$var wire 1 P next [19] $end
$var wire 1 Q next [18] $end
$var wire 1 R next [17] $end
$var wire 1 S next [16] $end
$var wire 1 T next [15] $end
$var wire 1 U next [14] $end
$var wire 1 V next [13] $end
$var wire 1 W next [12] $end
$var wire 1 X next [11] $end
$var wire 1 Y next [10] $end
$var wire 1 Z next [9] $end
$var wire 1 [ next [8] $end
$var wire 1 \ next [7] $end
$var wire 1 ] next [6] $end
$var wire 1 ^ next [5] $end
$var wire 1 _ next [4] $end
$var wire 1 ` next [3] $end
$var wire 1 a next [2] $end
$var wire 1 b next [1] $end
$var wire 1 c next [0] $end
$var reg 32 d current [31:0] $end
$upscope $end

$scope module mux_operand_A $end
$var wire 1 e sel $end
$var wire 1 f sel0 [31] $end
$var wire 1 g sel0 [30] $end
$var wire 1 h sel0 [29] $end
$var wire 1 i sel0 [28] $end
$var wire 1 j sel0 [27] $end
$var wire 1 k sel0 [26] $end
$var wire 1 l sel0 [25] $end
$var wire 1 m sel0 [24] $end
$var wire 1 n sel0 [23] $end
$var wire 1 o sel0 [22] $end
$var wire 1 p sel0 [21] $end
$var wire 1 q sel0 [20] $end
$var wire 1 r sel0 [19] $end
$var wire 1 s sel0 [18] $end
$var wire 1 t sel0 [17] $end
$var wire 1 u sel0 [16] $end
$var wire 1 v sel0 [15] $end
$var wire 1 w sel0 [14] $end
$var wire 1 x sel0 [13] $end
$var wire 1 y sel0 [12] $end
$var wire 1 z sel0 [11] $end
$var wire 1 { sel0 [10] $end
$var wire 1 | sel0 [9] $end
$var wire 1 } sel0 [8] $end
$var wire 1 ~ sel0 [7] $end
$var wire 1 !! sel0 [6] $end
$var wire 1 "! sel0 [5] $end
$var wire 1 #! sel0 [4] $end
$var wire 1 $! sel0 [3] $end
$var wire 1 %! sel0 [2] $end
$var wire 1 &! sel0 [1] $end
$var wire 1 '! sel0 [0] $end
$var wire 1 (! sel1 [31] $end
$var wire 1 )! sel1 [30] $end
$var wire 1 *! sel1 [29] $end
$var wire 1 +! sel1 [28] $end
$var wire 1 ,! sel1 [27] $end
$var wire 1 -! sel1 [26] $end
$var wire 1 .! sel1 [25] $end
$var wire 1 /! sel1 [24] $end
$var wire 1 0! sel1 [23] $end
$var wire 1 1! sel1 [22] $end
$var wire 1 2! sel1 [21] $end
$var wire 1 3! sel1 [20] $end
$var wire 1 4! sel1 [19] $end
$var wire 1 5! sel1 [18] $end
$var wire 1 6! sel1 [17] $end
$var wire 1 7! sel1 [16] $end
$var wire 1 8! sel1 [15] $end
$var wire 1 9! sel1 [14] $end
$var wire 1 :! sel1 [13] $end
$var wire 1 ;! sel1 [12] $end
$var wire 1 <! sel1 [11] $end
$var wire 1 =! sel1 [10] $end
$var wire 1 >! sel1 [9] $end
$var wire 1 ?! sel1 [8] $end
$var wire 1 @! sel1 [7] $end
$var wire 1 A! sel1 [6] $end
$var wire 1 B! sel1 [5] $end
$var wire 1 C! sel1 [4] $end
$var wire 1 D! sel1 [3] $end
$var wire 1 E! sel1 [2] $end
$var wire 1 F! sel1 [1] $end
$var wire 1 G! sel1 [0] $end
$var reg 32 H! out [31:0] $end
$upscope $end

$scope module Adder4 $end
$var parameter 32 I! Width $end
$var wire 1 J! in [31] $end
$var wire 1 K! in [30] $end
$var wire 1 L! in [29] $end
$var wire 1 M! in [28] $end
$var wire 1 N! in [27] $end
$var wire 1 O! in [26] $end
$var wire 1 P! in [25] $end
$var wire 1 Q! in [24] $end
$var wire 1 R! in [23] $end
$var wire 1 S! in [22] $end
$var wire 1 T! in [21] $end
$var wire 1 U! in [20] $end
$var wire 1 V! in [19] $end
$var wire 1 W! in [18] $end
$var wire 1 X! in [17] $end
$var wire 1 Y! in [16] $end
$var wire 1 Z! in [15] $end
$var wire 1 [! in [14] $end
$var wire 1 \! in [13] $end
$var wire 1 ]! in [12] $end
$var wire 1 ^! in [11] $end
$var wire 1 _! in [10] $end
$var wire 1 `! in [9] $end
$var wire 1 a! in [8] $end
$var wire 1 b! in [7] $end
$var wire 1 c! in [6] $end
$var wire 1 d! in [5] $end
$var wire 1 e! in [4] $end
$var wire 1 f! in [3] $end
$var wire 1 g! in [2] $end
$var wire 1 h! in [1] $end
$var wire 1 i! in [0] $end
$var reg 32 j! out [31:0] $end
$upscope $end

$scope module mux_pc $end
$var wire 1 k! sel $end
$var wire 1 l! sel0 [31] $end
$var wire 1 m! sel0 [30] $end
$var wire 1 n! sel0 [29] $end
$var wire 1 o! sel0 [28] $end
$var wire 1 p! sel0 [27] $end
$var wire 1 q! sel0 [26] $end
$var wire 1 r! sel0 [25] $end
$var wire 1 s! sel0 [24] $end
$var wire 1 t! sel0 [23] $end
$var wire 1 u! sel0 [22] $end
$var wire 1 v! sel0 [21] $end
$var wire 1 w! sel0 [20] $end
$var wire 1 x! sel0 [19] $end
$var wire 1 y! sel0 [18] $end
$var wire 1 z! sel0 [17] $end
$var wire 1 {! sel0 [16] $end
$var wire 1 |! sel0 [15] $end
$var wire 1 }! sel0 [14] $end
$var wire 1 ~! sel0 [13] $end
$var wire 1 !" sel0 [12] $end
$var wire 1 "" sel0 [11] $end
$var wire 1 #" sel0 [10] $end
$var wire 1 $" sel0 [9] $end
$var wire 1 %" sel0 [8] $end
$var wire 1 &" sel0 [7] $end
$var wire 1 '" sel0 [6] $end
$var wire 1 (" sel0 [5] $end
$var wire 1 )" sel0 [4] $end
$var wire 1 *" sel0 [3] $end
$var wire 1 +" sel0 [2] $end
$var wire 1 ," sel0 [1] $end
$var wire 1 -" sel0 [0] $end
$var wire 1 ." sel1 [31] $end
$var wire 1 /" sel1 [30] $end
$var wire 1 0" sel1 [29] $end
$var wire 1 1" sel1 [28] $end
$var wire 1 2" sel1 [27] $end
$var wire 1 3" sel1 [26] $end
$var wire 1 4" sel1 [25] $end
$var wire 1 5" sel1 [24] $end
$var wire 1 6" sel1 [23] $end
$var wire 1 7" sel1 [22] $end
$var wire 1 8" sel1 [21] $end
$var wire 1 9" sel1 [20] $end
$var wire 1 :" sel1 [19] $end
$var wire 1 ;" sel1 [18] $end
$var wire 1 <" sel1 [17] $end
$var wire 1 =" sel1 [16] $end
$var wire 1 >" sel1 [15] $end
$var wire 1 ?" sel1 [14] $end
$var wire 1 @" sel1 [13] $end
$var wire 1 A" sel1 [12] $end
$var wire 1 B" sel1 [11] $end
$var wire 1 C" sel1 [10] $end
$var wire 1 D" sel1 [9] $end
$var wire 1 E" sel1 [8] $end
$var wire 1 F" sel1 [7] $end
$var wire 1 G" sel1 [6] $end
$var wire 1 H" sel1 [5] $end
$var wire 1 I" sel1 [4] $end
$var wire 1 J" sel1 [3] $end
$var wire 1 K" sel1 [2] $end
$var wire 1 L" sel1 [1] $end
$var wire 1 M" sel1 [0] $end
$var reg 32 N" out [31:0] $end
$upscope $end

$scope module data_mem $end
$var wire 1 & clk $end
$var wire 1 O" addr [29] $end
$var wire 1 P" addr [28] $end
$var wire 1 Q" addr [27] $end
$var wire 1 R" addr [26] $end
$var wire 1 S" addr [25] $end
$var wire 1 T" addr [24] $end
$var wire 1 U" addr [23] $end
$var wire 1 V" addr [22] $end
$var wire 1 W" addr [21] $end
$var wire 1 X" addr [20] $end
$var wire 1 Y" addr [19] $end
$var wire 1 Z" addr [18] $end
$var wire 1 [" addr [17] $end
$var wire 1 \" addr [16] $end
$var wire 1 ]" addr [15] $end
$var wire 1 ^" addr [14] $end
$var wire 1 _" addr [13] $end
$var wire 1 `" addr [12] $end
$var wire 1 a" addr [11] $end
$var wire 1 b" addr [10] $end
$var wire 1 c" addr [9] $end
$var wire 1 d" addr [8] $end
$var wire 1 e" addr [7] $end
$var wire 1 f" addr [6] $end
$var wire 1 g" addr [5] $end
$var wire 1 h" addr [4] $end
$var wire 1 i" addr [3] $end
$var wire 1 j" addr [2] $end
$var wire 1 k" addr [1] $end
$var wire 1 l" addr [0] $end
$var wire 1 m" data_in [31] $end
$var wire 1 n" data_in [30] $end
$var wire 1 o" data_in [29] $end
$var wire 1 p" data_in [28] $end
$var wire 1 q" data_in [27] $end
$var wire 1 r" data_in [26] $end
$var wire 1 s" data_in [25] $end
$var wire 1 t" data_in [24] $end
$var wire 1 u" data_in [23] $end
$var wire 1 v" data_in [22] $end
$var wire 1 w" data_in [21] $end
$var wire 1 x" data_in [20] $end
$var wire 1 y" data_in [19] $end
$var wire 1 z" data_in [18] $end
$var wire 1 {" data_in [17] $end
$var wire 1 |" data_in [16] $end
$var wire 1 }" data_in [15] $end
$var wire 1 ~" data_in [14] $end
$var wire 1 !# data_in [13] $end
$var wire 1 "# data_in [12] $end
$var wire 1 ## data_in [11] $end
$var wire 1 $# data_in [10] $end
$var wire 1 %# data_in [9] $end
$var wire 1 &# data_in [8] $end
$var wire 1 '# data_in [7] $end
$var wire 1 (# data_in [6] $end
$var wire 1 )# data_in [5] $end
$var wire 1 *# data_in [4] $end
$var wire 1 +# data_in [3] $end
$var wire 1 ,# data_in [2] $end
$var wire 1 -# data_in [1] $end
$var wire 1 .# data_in [0] $end
$var wire 1 /# w_en $end
$var wire 1 0# read_en $end
$var reg 32 1# data_out [31:0] $end
$upscope $end

$scope module inst_mem $end
$var parameter 32 2# AddrWidth $end
$var wire 1 3# address [31] $end
$var wire 1 4# address [30] $end
$var wire 1 5# address [29] $end
$var wire 1 6# address [28] $end
$var wire 1 7# address [27] $end
$var wire 1 8# address [26] $end
$var wire 1 9# address [25] $end
$var wire 1 :# address [24] $end
$var wire 1 ;# address [23] $end
$var wire 1 <# address [22] $end
$var wire 1 =# address [21] $end
$var wire 1 ># address [20] $end
$var wire 1 ?# address [19] $end
$var wire 1 @# address [18] $end
$var wire 1 A# address [17] $end
$var wire 1 B# address [16] $end
$var wire 1 C# address [15] $end
$var wire 1 D# address [14] $end
$var wire 1 E# address [13] $end
$var wire 1 F# address [12] $end
$var wire 1 G# address [11] $end
$var wire 1 H# address [10] $end
$var wire 1 I# address [9] $end
$var wire 1 J# address [8] $end
$var wire 1 K# address [7] $end
$var wire 1 L# address [6] $end
$var wire 1 M# address [5] $end
$var wire 1 N# address [4] $end
$var wire 1 O# address [3] $end
$var wire 1 P# address [2] $end
$var wire 1 Q# address [1] $end
$var wire 1 R# address [0] $end
$var reg 32 S# instruction [31:0] $end
$upscope $end

$scope module alu_1 $end
$var parameter 32 T# Data_Width $end
$var parameter 32 U# Op_Width $end
$var parameter 4 V# signed_add $end
$var parameter 4 W# signed_sub $end
$var parameter 4 X# bitwise_sll $end
$var parameter 4 Y# set_less_than $end
$var parameter 4 Z# set_less_than_unsigned $end
$var parameter 4 [# bitwise_xor $end
$var parameter 4 \# bitwise_srl $end
$var parameter 4 ]# bitwise_sra $end
$var parameter 4 ^# bitwise_or $end
$var parameter 4 _# bitwise_and $end
$var wire 1 `# operand_a_i [31] $end
$var wire 1 a# operand_a_i [30] $end
$var wire 1 b# operand_a_i [29] $end
$var wire 1 c# operand_a_i [28] $end
$var wire 1 d# operand_a_i [27] $end
$var wire 1 e# operand_a_i [26] $end
$var wire 1 f# operand_a_i [25] $end
$var wire 1 g# operand_a_i [24] $end
$var wire 1 h# operand_a_i [23] $end
$var wire 1 i# operand_a_i [22] $end
$var wire 1 j# operand_a_i [21] $end
$var wire 1 k# operand_a_i [20] $end
$var wire 1 l# operand_a_i [19] $end
$var wire 1 m# operand_a_i [18] $end
$var wire 1 n# operand_a_i [17] $end
$var wire 1 o# operand_a_i [16] $end
$var wire 1 p# operand_a_i [15] $end
$var wire 1 q# operand_a_i [14] $end
$var wire 1 r# operand_a_i [13] $end
$var wire 1 s# operand_a_i [12] $end
$var wire 1 t# operand_a_i [11] $end
$var wire 1 u# operand_a_i [10] $end
$var wire 1 v# operand_a_i [9] $end
$var wire 1 w# operand_a_i [8] $end
$var wire 1 x# operand_a_i [7] $end
$var wire 1 y# operand_a_i [6] $end
$var wire 1 z# operand_a_i [5] $end
$var wire 1 {# operand_a_i [4] $end
$var wire 1 |# operand_a_i [3] $end
$var wire 1 }# operand_a_i [2] $end
$var wire 1 ~# operand_a_i [1] $end
$var wire 1 !$ operand_a_i [0] $end
$var wire 1 "$ operand_b_i [31] $end
$var wire 1 #$ operand_b_i [30] $end
$var wire 1 $$ operand_b_i [29] $end
$var wire 1 %$ operand_b_i [28] $end
$var wire 1 &$ operand_b_i [27] $end
$var wire 1 '$ operand_b_i [26] $end
$var wire 1 ($ operand_b_i [25] $end
$var wire 1 )$ operand_b_i [24] $end
$var wire 1 *$ operand_b_i [23] $end
$var wire 1 +$ operand_b_i [22] $end
$var wire 1 ,$ operand_b_i [21] $end
$var wire 1 -$ operand_b_i [20] $end
$var wire 1 .$ operand_b_i [19] $end
$var wire 1 /$ operand_b_i [18] $end
$var wire 1 0$ operand_b_i [17] $end
$var wire 1 1$ operand_b_i [16] $end
$var wire 1 2$ operand_b_i [15] $end
$var wire 1 3$ operand_b_i [14] $end
$var wire 1 4$ operand_b_i [13] $end
$var wire 1 5$ operand_b_i [12] $end
$var wire 1 6$ operand_b_i [11] $end
$var wire 1 7$ operand_b_i [10] $end
$var wire 1 8$ operand_b_i [9] $end
$var wire 1 9$ operand_b_i [8] $end
$var wire 1 :$ operand_b_i [7] $end
$var wire 1 ;$ operand_b_i [6] $end
$var wire 1 <$ operand_b_i [5] $end
$var wire 1 =$ operand_b_i [4] $end
$var wire 1 >$ operand_b_i [3] $end
$var wire 1 ?$ operand_b_i [2] $end
$var wire 1 @$ operand_b_i [1] $end
$var wire 1 A$ operand_b_i [0] $end
$var wire 1 B$ alu_op [3] $end
$var wire 1 C$ alu_op [2] $end
$var wire 1 D$ alu_op [1] $end
$var wire 1 E$ alu_op [0] $end
$var reg 32 F$ result_o [31:0] $end
$upscope $end

$scope module reg_file $end
$var wire 1 & clk $end
$var wire 1 G$ write_enable $end
$var wire 1 H$ write_address [4] $end
$var wire 1 I$ write_address [3] $end
$var wire 1 J$ write_address [2] $end
$var wire 1 K$ write_address [1] $end
$var wire 1 L$ write_address [0] $end
$var wire 1 M$ write_data [31] $end
$var wire 1 N$ write_data [30] $end
$var wire 1 O$ write_data [29] $end
$var wire 1 P$ write_data [28] $end
$var wire 1 Q$ write_data [27] $end
$var wire 1 R$ write_data [26] $end
$var wire 1 S$ write_data [25] $end
$var wire 1 T$ write_data [24] $end
$var wire 1 U$ write_data [23] $end
$var wire 1 V$ write_data [22] $end
$var wire 1 W$ write_data [21] $end
$var wire 1 X$ write_data [20] $end
$var wire 1 Y$ write_data [19] $end
$var wire 1 Z$ write_data [18] $end
$var wire 1 [$ write_data [17] $end
$var wire 1 \$ write_data [16] $end
$var wire 1 ]$ write_data [15] $end
$var wire 1 ^$ write_data [14] $end
$var wire 1 _$ write_data [13] $end
$var wire 1 `$ write_data [12] $end
$var wire 1 a$ write_data [11] $end
$var wire 1 b$ write_data [10] $end
$var wire 1 c$ write_data [9] $end
$var wire 1 d$ write_data [8] $end
$var wire 1 e$ write_data [7] $end
$var wire 1 f$ write_data [6] $end
$var wire 1 g$ write_data [5] $end
$var wire 1 h$ write_data [4] $end
$var wire 1 i$ write_data [3] $end
$var wire 1 j$ write_data [2] $end
$var wire 1 k$ write_data [1] $end
$var wire 1 l$ write_data [0] $end
$var wire 1 m$ read_address1 [4] $end
$var wire 1 n$ read_address1 [3] $end
$var wire 1 o$ read_address1 [2] $end
$var wire 1 p$ read_address1 [1] $end
$var wire 1 q$ read_address1 [0] $end
$var wire 1 r$ read_address2 [4] $end
$var wire 1 s$ read_address2 [3] $end
$var wire 1 t$ read_address2 [2] $end
$var wire 1 u$ read_address2 [1] $end
$var wire 1 v$ read_address2 [0] $end
$var reg 32 w$ read_data1 [31:0] $end
$var reg 32 x$ read_data2 [31:0] $end
$upscope $end

$scope module imm_gen $end
$var wire 1 y$ In [31] $end
$var wire 1 z$ In [30] $end
$var wire 1 {$ In [29] $end
$var wire 1 |$ In [28] $end
$var wire 1 }$ In [27] $end
$var wire 1 ~$ In [26] $end
$var wire 1 !% In [25] $end
$var wire 1 "% In [24] $end
$var wire 1 #% In [23] $end
$var wire 1 $% In [22] $end
$var wire 1 %% In [21] $end
$var wire 1 &% In [20] $end
$var wire 1 '% In [19] $end
$var wire 1 (% In [18] $end
$var wire 1 )% In [17] $end
$var wire 1 *% In [16] $end
$var wire 1 +% In [15] $end
$var wire 1 ,% In [14] $end
$var wire 1 -% In [13] $end
$var wire 1 .% In [12] $end
$var wire 1 /% In [11] $end
$var wire 1 0% In [10] $end
$var wire 1 1% In [9] $end
$var wire 1 2% In [8] $end
$var wire 1 3% In [7] $end
$var wire 1 4% In [6] $end
$var wire 1 5% In [5] $end
$var wire 1 6% In [4] $end
$var wire 1 7% In [3] $end
$var wire 1 8% In [2] $end
$var wire 1 9% In [1] $end
$var wire 1 :% In [0] $end
$var reg 32 ;% Out [31:0] $end
$upscope $end

$scope module branch $end
$var wire 1 <% br_type $end
$var wire 1 =% funct3 [2] $end
$var wire 1 >% funct3 [1] $end
$var wire 1 ?% funct3 [0] $end
$var wire 1 @% rs1_data [31] $end
$var wire 1 A% rs1_data [30] $end
$var wire 1 B% rs1_data [29] $end
$var wire 1 C% rs1_data [28] $end
$var wire 1 D% rs1_data [27] $end
$var wire 1 E% rs1_data [26] $end
$var wire 1 F% rs1_data [25] $end
$var wire 1 G% rs1_data [24] $end
$var wire 1 H% rs1_data [23] $end
$var wire 1 I% rs1_data [22] $end
$var wire 1 J% rs1_data [21] $end
$var wire 1 K% rs1_data [20] $end
$var wire 1 L% rs1_data [19] $end
$var wire 1 M% rs1_data [18] $end
$var wire 1 N% rs1_data [17] $end
$var wire 1 O% rs1_data [16] $end
$var wire 1 P% rs1_data [15] $end
$var wire 1 Q% rs1_data [14] $end
$var wire 1 R% rs1_data [13] $end
$var wire 1 S% rs1_data [12] $end
$var wire 1 T% rs1_data [11] $end
$var wire 1 U% rs1_data [10] $end
$var wire 1 V% rs1_data [9] $end
$var wire 1 W% rs1_data [8] $end
$var wire 1 X% rs1_data [7] $end
$var wire 1 Y% rs1_data [6] $end
$var wire 1 Z% rs1_data [5] $end
$var wire 1 [% rs1_data [4] $end
$var wire 1 \% rs1_data [3] $end
$var wire 1 ]% rs1_data [2] $end
$var wire 1 ^% rs1_data [1] $end
$var wire 1 _% rs1_data [0] $end
$var wire 1 `% rs2_data [31] $end
$var wire 1 a% rs2_data [30] $end
$var wire 1 b% rs2_data [29] $end
$var wire 1 c% rs2_data [28] $end
$var wire 1 d% rs2_data [27] $end
$var wire 1 e% rs2_data [26] $end
$var wire 1 f% rs2_data [25] $end
$var wire 1 g% rs2_data [24] $end
$var wire 1 h% rs2_data [23] $end
$var wire 1 i% rs2_data [22] $end
$var wire 1 j% rs2_data [21] $end
$var wire 1 k% rs2_data [20] $end
$var wire 1 l% rs2_data [19] $end
$var wire 1 m% rs2_data [18] $end
$var wire 1 n% rs2_data [17] $end
$var wire 1 o% rs2_data [16] $end
$var wire 1 p% rs2_data [15] $end
$var wire 1 q% rs2_data [14] $end
$var wire 1 r% rs2_data [13] $end
$var wire 1 s% rs2_data [12] $end
$var wire 1 t% rs2_data [11] $end
$var wire 1 u% rs2_data [10] $end
$var wire 1 v% rs2_data [9] $end
$var wire 1 w% rs2_data [8] $end
$var wire 1 x% rs2_data [7] $end
$var wire 1 y% rs2_data [6] $end
$var wire 1 z% rs2_data [5] $end
$var wire 1 {% rs2_data [4] $end
$var wire 1 |% rs2_data [3] $end
$var wire 1 }% rs2_data [2] $end
$var wire 1 ~% rs2_data [1] $end
$var wire 1 !& rs2_data [0] $end
$var reg 1 "& take_branch $end
$upscope $end

$scope module ctrlr $end
$var wire 1 #& opcode [6] $end
$var wire 1 $& opcode [5] $end
$var wire 1 %& opcode [4] $end
$var wire 1 && opcode [3] $end
$var wire 1 '& opcode [2] $end
$var wire 1 (& opcode [1] $end
$var wire 1 )& opcode [0] $end
$var wire 1 *& funct3 [2] $end
$var wire 1 +& funct3 [1] $end
$var wire 1 ,& funct3 [0] $end
$var wire 1 -& funct7 [6] $end
$var wire 1 .& funct7 [5] $end
$var wire 1 /& funct7 [4] $end
$var wire 1 0& funct7 [3] $end
$var wire 1 1& funct7 [2] $end
$var wire 1 2& funct7 [1] $end
$var wire 1 3& funct7 [0] $end
$var reg 4 4& alu_op [3:0] $end
$var reg 1 5& reg_write $end
$var reg 1 6& PCen $end
$var reg 1 7& read_en $end
$var reg 1 8& wb_sel $end
$var reg 1 9& write_en $end
$var reg 1 :& br_type $end
$var reg 1 ;& sel_A $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
1"
bx (
bx )
x*
bx +
bx ,
bx -
bx .
bx /
bx 0
bx 1
x2
bx 3
bx 4
bx 5
x6
x7
x8
x9
x:
x;
bx <
0=
bx >
x?
bx @
xA
bx d
bx H!
bx j!
bx N"
bx 1#
bx S#
bx F$
bx w$
bx x$
bx ;%
0"&
bx 4&
x5&
x6&
x7&
x8&
x9&
x:&
x;&
b100000 #
b100000 $
b101 %
b100000 B
b100000 I!
b100000 2#
b100000 T#
b100 U#
b0 V#
b1 W#
b10 X#
b11 Y#
b100 Z#
b101 [#
b110 \#
b111 ]#
b1000 ^#
b1001 _#
0&
1'
xA$
x@$
x?$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
xC
xc
xb
xa
x`
x_
x^
x]
x\
x[
xZ
xY
xX
xW
xV
xU
xT
xS
xR
xQ
xP
xO
xN
xM
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xe
x'!
x&!
x%!
x$!
x#!
x"!
x!!
x~
x}
x|
x{
xz
xy
xx
xw
xv
xu
xt
xs
xr
xq
xp
xo
xn
xm
xl
xk
xj
xi
xh
xg
xf
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
xi!
xh!
xg!
xf!
xe!
xd!
xc!
xb!
xa!
x`!
x_!
x^!
x]!
x\!
x[!
xZ!
xY!
xX!
xW!
xV!
xU!
xT!
xS!
xR!
xQ!
xP!
xO!
xN!
xM!
xL!
xK!
xJ!
0k!
x-"
x,"
x+"
x*"
x)"
x("
x'"
x&"
x%"
x$"
x#"
x""
x!"
x~!
x}!
x|!
x{!
xz!
xy!
xx!
xw!
xv!
xu!
xt!
xs!
xr!
xq!
xp!
xo!
xn!
xm!
xl!
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
x/#
x0#
xR#
xQ#
xP#
xO#
xN#
xM#
xL#
xK#
xJ#
xI#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
x@#
x?#
x>#
x=#
x<#
x;#
x:#
x9#
x8#
x7#
x6#
x5#
x4#
x3#
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
xE$
xD$
xC$
xB$
xG$
xL$
xK$
xJ$
xI$
xH$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
xq$
xp$
xo$
xn$
xm$
xv$
xu$
xt$
xs$
xr$
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
x<%
x?%
x>%
x=%
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x,&
x+&
x*&
x3&
x2&
x1&
x0&
x/&
x.&
x-&
$end
#5000
1!
1&
0"
0'
b0 d
b0 (
0i!
0h!
0g!
0f!
0e!
0d!
0c!
0b!
0a!
0`!
0_!
0^!
0]!
0\!
0[!
0Z!
0Y!
0X!
0W!
0V!
0U!
0T!
0S!
0R!
0Q!
0P!
0O!
0N!
0M!
0L!
0K!
0J!
0R#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
0=#
0<#
0;#
0:#
09#
08#
07#
06#
05#
04#
03#
b1000000000000010010011 S#
b100 j!
b100 )
b1000000000000010010011 +
1L$
0K$
0J$
0I$
0H$
03&
02&
01&
00&
0/&
0.&
0-&
0,&
0+&
0*&
1)&
1(&
0'&
0&&
1%&
0$&
0#&
0?%
0>%
0=%
0v$
1u$
0t$
0s$
0r$
0q$
0p$
0o$
0n$
0m$
1:%
19%
08%
07%
16%
05%
04%
13%
02%
01%
00%
0/%
0.%
0-%
0,%
0+%
0*%
0)%
0(%
0'%
0&%
1%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
0y$
0-"
0,"
1+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~!
0}!
0|!
0{!
0z!
0y!
0x!
0w!
0v!
0u!
0t!
0s!
0r!
0q!
0p!
0o!
0n!
0m!
0l!
0'!
0&!
0%!
0$!
0#!
0"!
0!!
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
b0 H!
b100 N"
b0 w$
b0 4&
05&
16&
15&
07&
09&
08&
0:&
1;&
1?
0A
08
09
07
1*
16
b0 5
b0 /
b100 >
b0 @
12
0/#
00#
1C
0c
0b
1a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
1G$
1e
0<%
0!$
0~#
0}#
0|#
0{#
0z#
0y#
0x#
0w#
0v#
0u#
0t#
0s#
0r#
0q#
0p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
0.!
0-!
0,!
0+!
0*!
0)!
0(!
0_%
0^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
0U%
0T%
0S%
0R%
0Q%
0P%
0O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
0D%
0C%
0B%
0A%
0@%
0E$
0D$
0C$
0B$
b10 ;%
b10 4
0A$
1@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
0+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
0#$
0"$
b10 F$
b10 3
b10 1
0l$
1k$
0j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
0Y"
0X"
0W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0M"
1L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
b101 1#
b101 <
#10000
0!
0&
#15000
1!
1&
b100 d
b100 (
1g!
1P#
b1000000000000100010011 S#
b1000 j!
b1000 )
b1000000000000100010011 +
0L$
1K$
03%
12%
0+"
1*"
1%!
b1000 N"
b1000 >
0a
1`
#20000
0!
0&
#25000
1!
1&
b1000 d
b1000 (
0g!
1f!
0P#
1O#
b10100000000000110010011 S#
b1100 j!
b1100 )
b10100000000000110010011 +
1L$
1v$
0u$
1t$
13%
1&%
0%%
1$%
1+"
0%!
1$!
b1100 N"
b1100 >
1a
b101 ;%
b101 4
1A$
0@$
1?$
b101 F$
b101 3
b101 1
1l$
0k$
1j$
1l"
1M"
0L"
1K"
bx 1#
bx <
#30000
0!
0&
#35000
1!
1&
b1100 d
b1100 (
1g!
1P#
b1000001000010001100011 S#
b10000 j!
b10000 )
b1000001000010001100011 +
0L$
0K$
1I$
0%&
1$&
1#&
0v$
1u$
0t$
1q$
06%
15%
14%
03%
02%
10%
1+%
0&%
1%%
0$%
0+"
0*"
1)"
1%!
b10000 N"
05&
15&
1:&
0;&
b10 w$
b10 x$
b10 0
b10 /
0?
1A
b10000 >
0a
0`
1_
0.#
1-#
0,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
0##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
1F!
1^%
0!&
1~%
0}%
0|%
0{%
0z%
0y%
0x%
0w%
0v%
0u%
0t%
0s%
0r%
0q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0e
1<%
1"&
b1100 H!
b1100 @
1=
1}#
1|#
1k!
b101 N"
b10001 F$
b10001 3
b101 >
b10001 1
1c
1a
0_
0j$
1h$
0l"
1j"
0K"
1I"
b10001 N"
b10001 >
0a
1_
b1000 ;%
b1000 4
0A$
0?$
1>$
b10100 F$
b10100 3
b10100 1
0l$
1j$
1l"
0M"
1K"
b10100 N"
b10100 >
0c
1a
#40000
0!
0&
#45000
1!
1&
b10100 d
b10100 (
0f!
1e!
0O#
1N#
b1100000010000000100011 S#
b11000 j!
b11000 )
b1100000010000000100011 +
0I$
1+&
0#&
1>%
1v$
0q$
04%
00%
1-%
0+%
1&%
1*"
0$!
1#!
b10100 H!
0"&
05&
19&
18&
0:&
1;&
b0 w$
b101 x$
b101 0
b0 /
1?
0A
18
19
06
0=
b10100 @
02
bx 1
1.#
0-#
1,#
1/#
0G$
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
1e
0<%
0k!
0|#
1{#
0F!
0^%
1!&
0~%
1}%
b11100 F$
b11000 N"
b0 H!
b0 @
b11000 >
b11100 3
0a
1`
1k"
1J"
0}#
0{#
b1000 F$
b1000 3
0l"
0j"
0K"
0I"
b0 ;%
b0 4
0>$
b0 F$
b0 3
0k"
0J"
b101 1#
b101 <
b101 1
1l$
0k$
1j$
0i$
0h$
0g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
0W$
0V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
0M$
#50000
0!
0&
#55000
1!
1&
b11000 d
b11000 (
0g!
1f!
0P#
1O#
bx S#
b11100 j!
b11100 )
bx +
xL$
xK$
xJ$
xI$
xH$
x3&
x2&
x1&
x0&
x/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
x&&
x%&
x$&
x#&
x?%
x>%
x=%
xv$
xu$
xt$
xs$
xr$
xq$
xp$
xo$
xn$
xm$
x:%
x9%
x8%
x7%
x6%
x5%
x4%
x3%
x2%
x1%
x0%
x/%
x.%
x-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
x$%
x#%
x"%
x!%
x~$
x}$
x|$
x{$
xz$
xy$
xA$
x?$
1+"
0%!
1$!
b11100 N"
bx F$
bx w$
bx x$
b1111 4&
b1111 5
bx 0
bx /
bx 3
b11100 >
1a
x.#
x-#
x,#
x+#
x*#
x)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
x~"
x}"
x|"
x{"
xz"
xy"
xx"
xw"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
xn"
xm"
xl"
xk"
xj"
xi"
xh"
xg"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
x^"
x]"
x\"
x["
xZ"
xY"
xX"
xW"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
xM"
xL"
xK"
xJ"
xI"
xH"
xG"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
x>"
x="
x<"
x;"
x:"
x9"
x8"
x7"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
x."
xG!
xF!
xE!
xD!
xC!
xB!
xA!
x@!
x?!
x>!
x=!
x<!
x;!
x:!
x9!
x8!
x7!
x6!
x5!
x4!
x3!
x2!
x1!
x0!
x/!
x.!
x-!
x,!
x+!
x*!
x)!
x(!
x_%
x^%
x]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
xT%
xS%
xR%
xQ%
xP%
xO%
xN%
xM%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
xD%
xC%
xB%
xA%
x@%
x!&
x~%
x}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
xt%
xs%
xr%
xq%
xp%
xo%
xn%
xm%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
xd%
xc%
xb%
xa%
x`%
x@$
x>$
x=$
x<$
x;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
x2$
x1$
x0$
x/$
x.$
x-$
x,$
x+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
x"$
1E$
1D$
1C$
1B$
bx H!
bx 1#
bx <
bx @
bx 1
xl$
xk$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
xb$
xa$
x`$
x_$
x^$
x]$
x\$
x[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
xR$
xQ$
xP$
xO$
xN$
xM$
x!$
x~#
x}#
x|#
x{#
xz#
xy#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
xp#
xo#
xn#
xm#
xl#
xk#
xj#
xi#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
x`#
#60000
0!
0&
#65000
1!
1&
b11100 d
b11100 (
1g!
1P#
b100000 j!
b100000 )
0+"
0*"
0)"
1("
1%!
b100000 N"
b100000 >
0a
0`
0_
1^
#70000
0!
0&
#75000
1!
1&
b100000 d
b100000 (
0g!
0f!
0e!
1d!
0P#
0O#
0N#
1M#
b100100 j!
b100100 )
1+"
0%!
0$!
0#!
1"!
b100100 N"
b100100 >
1a
#80000
0!
0&
#85000
1!
1&
b100100 d
b100100 (
1g!
1P#
b101000 j!
b101000 )
0+"
1*"
1%!
b101000 N"
b101000 >
0a
1`
#90000
0!
0&
#95000
1!
1&
b101000 d
b101000 (
0g!
1f!
0P#
1O#
b101100 j!
b101100 )
1+"
0%!
1$!
b101100 N"
b101100 >
1a
#100000
0!
0&
#105000
1!
1&
b101100 d
b101100 (
1g!
1P#
b110000 j!
b110000 )
0+"
0*"
1)"
1%!
b110000 N"
b110000 >
0a
0`
1_
#110000
0!
0&
#115000
1!
1&
b110000 d
b110000 (
0g!
0f!
1e!
0P#
0O#
1N#
b110100 j!
b110100 )
1+"
0%!
0$!
1#!
b110100 N"
b110100 >
1a
#120000
0!
0&
#125000
1!
1&
b110100 d
b110100 (
1g!
1P#
b111000 j!
b111000 )
0+"
1*"
1%!
b111000 N"
b111000 >
0a
1`
#130000
0!
0&
#135000
1!
1&
b111000 d
b111000 (
0g!
1f!
0P#
1O#
b111100 j!
b111100 )
1+"
0%!
1$!
b111100 N"
b111100 >
1a
#140000
0!
0&
#145000
1!
1&
b111100 d
b111100 (
1g!
1P#
b1000000 j!
b1000000 )
0+"
0*"
0)"
0("
1'"
1%!
b1000000 N"
b1000000 >
0a
0`
0_
0^
1]
#150000
0!
0&
#155000
1!
1&
b1000000 d
b1000000 (
0g!
0f!
0e!
0d!
1c!
0P#
0O#
0N#
0M#
1L#
b1000100 j!
b1000100 )
1+"
0%!
0$!
0#!
0"!
1!!
b1000100 N"
b1000100 >
1a
#160000
0!
0&
#165000
1!
1&
b1000100 d
b1000100 (
1g!
1P#
b1001000 j!
b1001000 )
0+"
1*"
1%!
b1001000 N"
b1001000 >
0a
1`
#170000
0!
0&
#175000
1!
1&
b1001000 d
b1001000 (
0g!
1f!
0P#
1O#
b1001100 j!
b1001100 )
1+"
0%!
1$!
b1001100 N"
b1001100 >
1a
#180000
0!
0&
#185000
1!
1&
b1001100 d
b1001100 (
1g!
1P#
b1010000 j!
b1010000 )
0+"
0*"
1)"
1%!
b1010000 N"
b1010000 >
0a
0`
1_
#190000
0!
0&
#195000
1!
1&
b1010000 d
b1010000 (
0g!
0f!
1e!
0P#
0O#
1N#
b1010100 j!
b1010100 )
1+"
0%!
0$!
1#!
b1010100 N"
b1010100 >
1a
#200000
0!
0&
